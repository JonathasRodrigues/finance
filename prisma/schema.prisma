generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  BankAccount   BankAccount[]
  Income        Income[]
  Expense       Expense[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ExpenseCategory {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Expense   Expense[]
}

model BankAccount {
  id        String   @id @default(cuid())
  name      String   @unique
  balance   Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  PaymentMethod PaymentMethod[]
  Income        Income[]
}

model ExpenseType {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Expense   Expense[]
}

model PaymentMethod {
  id            String      @id @default(cuid())
  name          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  bankAccountId String
  bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id])
  Expense       Expense[]
}

model Expense {
  id                 String   @id @default(cuid())
  name               String
  value              Float
  currentInstallment Int?
  totalInstallment   Int?
  dueDate            DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  categoryId         String
  typeId             String
  paymentMethodId    String
  userId             String

  category      ExpenseCategory @relation(fields: [categoryId], references: [id])
  type          ExpenseType     @relation(fields: [typeId], references: [id])
  paymentMethod PaymentMethod   @relation(fields: [paymentMethodId], references: [id])
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Income {
  id            String      @id @default(cuid())
  name          String
  value         Float
  payDay        DateTime
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  userId        String
  bankAccountId String
  bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id])
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}
